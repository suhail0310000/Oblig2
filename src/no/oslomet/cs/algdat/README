# Arbeidsfordeling

Oppgaven er levert av følgende studenter:
* Suhail, s341868, s341868@oslomet.no



I oppgaven har vi hatt følgende arbeidsfordeling:
Suhail har gjort oppgave 1,2,3,4,5,6,8

Jeg har brukt git til å dokumentere arbeidet vårt. Jeg har 19 commits totalt, og hver logg-melding beskriver hvor langt jeg har kommet i oppgaven

# Beskrivelse av oppgaveløsning (maks 5 linjer per oppgave)

* Oppgave 1:
Løste denne ved å implementere metodene "antall" og "tom",
hvor den førstenevnte meotden kunne returnere antalle verdier
og den sistnevnte kunne returnere true/false avhengig om tabellen er tom.
Deretter deklarerte jeg konstruktøren "DobbeltLenketListe", for å ha tilgang til hode, hale og antall.
I metoden "DoubleLenketListe" behandler jeg først null-verdier, fordi dette ikke er tillatt. Deretter lager jeg en if
setning "if a.length!=null", for å kunne loope og hvis den bare finner null- verdier returnerer den en tom tabell.
Tilslut finner jeg alle de ikke-nullverdiene ved den siste for-loopen med "if(a[i]!=null" og setter inn en ny node.

* Oppgave 2:
Jeg løste oppgave 2a ved å bruke Stringbuilder. Jeg prøvde å bruke Stringjoiner, for å utfordre meg selv, men karte det ikke.
Jeg lagde en if-test i både String og omvendtString, hvor den tar for seg tabeller som ikke er tomme.
Deretter "appender" jeg noder med på det tekstformatet som er oppgitt i obligen ved å bruke loop. "leggInn" metoden er for
å tilføre verdier inn i tabellen, dette gjør jeg først ved å lage en if-setning, som  setter hode og hale til null, hvis den er tom osv
og ellers appender den ny node.

* Oppgave 3:
Jeg lagde først finnNoden ved å begrense definisjonsmegnde, det ligner litt det med partisjoner. Jeg deler tabellen-
i to ved å ta if(antall/2), så looper jeg meg oppover fra hode til denne verdien via en for loop++, og det samme fra motsatt side-
fra halen, via en for-lopp(i--). Deretter oppdaterer jeg tabellen med nye verdier via "Oppdater"- metoden, og begrenser igjen definisjon-
mengden ved å kaste Exception på null-verdier og tilføre nye verdier. På subliste-metoden bruker jeg metoden "fraTilKontroll" for å-
sjekke om intevallet er gyldig, og hvis den er gyldig, looper jeg gjennom og legger til ny noder.

* Oppgave 4:
Jeg lager først "indeksTil"-metoden, for å returnere indeksen/posisjonen til "verdi",
 hvis den finnes i listen og returnere -1, hvis den ikke finnes.
Siden null ikke finnes i listen, returnere vi -1.
Deretter lager vi en for-loop for å kjøre gjennom, og returnere verdien (den første hvis den har flere forekomster).
Tilslutt lager vi metoden "boolean inneholder", som bruker "indekstil" metoden for å returnere true hvis listen inneholder en verdi

* Oppgave 5:
Jeg løste oppgave 5 ved å først lage en if-setning:(hode == null && hale == null && antall == 0) i "leggInn"-metoden,
som utelukker alle intervaller for tom-liste. Deretter i else legger jeg inn en ny node.
På bakgrunn av dette peker pekerne riktig-> hode og hale på null når listen er tom.

* Oppgave 6:
Jeg løste oppgave 6 ved hovedsaklig hjelp av to metoder, nemlig "T fjern(int indeks)" og "boolean fjern(T verdi)". I begge metodene må jeg-
passe på alle tilfellene(se kildekode). Det første jeg gjør i den førstnevnte metoden er å utelukke ugyldige intervaller ved å bruke "indekskontroll".
Deretter bruker jeg if-setninger for å dekke ovver alle de fire tilfellene. I den sistnevnte metoden "Boolean fjern(T verdi)" tar jeg for meg alle-
scenarioene, som for eksempel i den siste for-loopen kjører jeg gjennom tabellen for alle ikke-nullverdier og i else returnerer jeg "false"-
fordi de resterende har nullverdier i seg, dermed skal det ikke kastes exception, men "return false" som oppgaven sier.

* Oppgave 8:
Oppgave 8 var en relativ simpel oppgave som ble løst kun ved å følge steg for steg i oppgaven. I "T next"- bruker jeg to if-setninger-
((!hasNext()), (iteratorendringer != endringer)-> førstnevnte-> for å sjekke om om det er flere i listen (!hasNext)-> kast NoSuchElementException-
sistnevnte->sjekke om iteratorendringer er lik endringer ((iteratorendringer != endringer)-> kast ConcurrentModificationException.
Deretter fjerner jeg verdien, og bruker en hjelpevariabel for å holde på "denne.verdi", som blir returnert tilslutt. . De resterende
metodene gikk hovedsaklig ut på å gjøre indekskontroll sjekke hvilke intervaller som er gyldig

